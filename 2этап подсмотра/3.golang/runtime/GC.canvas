{
	"nodes":[
		{"id":"7deb409d4e64c104","type":"text","text":"Garbage Collector","x":-124,"y":-60,"width":224,"height":60},
		{"id":"cb51de042e9d2e87","type":"text","text":"GC работает только с данными, которые хранятся в куче (heap). Локальные переменные, находящиеся в стеке, автоматически освобождаются по мере завершения функций и не нуждаются в GC.","x":-1080,"y":-96,"width":457,"height":132},
		{"id":"bd7130f2fcf59c75","type":"text","text":"Его работа состоит из 2 фаз:\n\nMark: находим и отмечаем все достижимые объекты из набора (например, в куче).\n\nSweep: проходим по всем объектам в куче, затираем недостижимые и возвращаем их в пул свободной памяти.","x":-184,"y":820,"width":345,"height":290},
		{"id":"6d2573109f13ccee","type":"text","text":"Go использует *mark-and-sweep* алгоритм с улучшениями для минимизации пауз в работе программы. В версии Go 1.5 был добавлен режим «Concurrent Mark-Sweep» (конкурентный GC), который снижает время приостановки приложения во время сборки мусора.","x":-245,"y":491,"width":467,"height":188},
		{"id":"2bdb3fd26b823f84","type":"text","text":"Основной параметр — это `GOGC`, который управляет порогом запуска GC. По умолчанию `GOGC=100`, что означает запуск GC, когда объём мусора увеличивается на 100% от предыдущего значения. Можно уменьшить или увеличить это значение для оптимизации работы программы.","x":-860,"y":679,"width":358,"height":259},
		{"id":"20befd9243fbb918","type":"text","text":"Go использует *tracing garbage collector*, который отслеживает объекты, начиная с корневых ссылок (например, глобальных переменных и стека вызовов), и определяет, какие объекты всё ещё доступны. Если объекты больше не достижимы, они считаются мусором и очищаются.","x":480,"y":491,"width":407,"height":205},
		{"id":"ed68c200d9c58080","type":"text","text":"Основные типы пауз включают фазу «Stop-the-world» (STW), которая останавливает выполнение приложения для синхронизации GC. Для минимизации пауз можно уменьшить `GOGC` и использовать асинхронные операции, избегая крупных структур данных, которые требуют частой очистки","x":-846,"y":220,"width":447,"height":201},
		{"id":"0569b1807622575e","type":"text","text":"Разработчики могут оптимизировать работу с памятью, используя `sync.Pool` для кэширования объектов, эффективно работать со слайсами и избегать создания ненужных объектов, чтобы снизить нагрузку на GC.","x":534,"y":160,"width":386,"height":196},
		{"id":"4a0c898b50e3e5f3","type":"text","text":"ЯВЛЯЕТСЯ ЧАСТЬЮ RUNTIME","x":-154,"y":-220,"width":285,"height":50},
		{"id":"c88aaf55b5564b86","type":"text","text":"*Write barrier* — это механизм, который помогает GC отслеживать изменения в памяти во время фазы `marking`. Он предотвращает «утечки» ссылок, чтобы GC мог корректно отметить все доступные объекты.","x":620,"y":-170,"width":440,"height":180},
		{"id":"e6238915800154ee","type":"text","text":"Можно вызвать вручную runtime.GC()","x":370,"y":36,"width":250,"height":60},
		{"id":"9de561739601168d","type":"file","file":"image/Pasted image 20250108170838.png","x":170,"y":-480,"width":400,"height":165}
	],
	"edges":[
		{"id":"879845d95959ec3a","fromNode":"7deb409d4e64c104","fromSide":"bottom","toNode":"bd7130f2fcf59c75","toSide":"top"},
		{"id":"54097a4924677a8b","fromNode":"7deb409d4e64c104","fromSide":"bottom","toNode":"6d2573109f13ccee","toSide":"top","label":"алгоритм"},
		{"id":"a7519a28633ae0b6","fromNode":"6d2573109f13ccee","fromSide":"bottom","toNode":"bd7130f2fcf59c75","toSide":"top"},
		{"id":"e3818c1a4c1223ae","fromNode":"6d2573109f13ccee","fromSide":"right","toNode":"20befd9243fbb918","toSide":"left","label":"как работает"},
		{"id":"bcd61017dbacc308","fromNode":"6d2573109f13ccee","fromSide":"left","toNode":"2bdb3fd26b823f84","toSide":"top","label":"как поменять настройку"},
		{"id":"caeac7fbd01b6b19","fromNode":"7deb409d4e64c104","fromSide":"left","toNode":"cb51de042e9d2e87","toSide":"right","label":"с какими данными работает"},
		{"id":"f27e42157d671095","fromNode":"7deb409d4e64c104","fromSide":"right","toNode":"c88aaf55b5564b86","toSide":"left","label":"Write barrier"},
		{"id":"4f40fdb5a2080ca9","fromNode":"7deb409d4e64c104","fromSide":"bottom","toNode":"ed68c200d9c58080","toSide":"right","label":"паузы"},
		{"id":"c6445febbbf3c6dd","fromNode":"7deb409d4e64c104","fromSide":"bottom","toNode":"0569b1807622575e","toSide":"left","label":"уменьшить нагрузку"},
		{"id":"8225905ad424f6ff","fromNode":"7deb409d4e64c104","fromSide":"top","toNode":"4a0c898b50e3e5f3","toSide":"bottom","color":"1"},
		{"id":"3a5a649d8a386fc9","fromNode":"7deb409d4e64c104","fromSide":"bottom","toNode":"e6238915800154ee","toSide":"left","label":"вызов"},
		{"id":"273c3bc149643890","fromNode":"7deb409d4e64c104","fromSide":"right","toNode":"9de561739601168d","toSide":"bottom","label":"влияние скорости на процет"}
	]
}