{
	"nodes":[
		{"id":"d6c5f99ec33649ea","type":"text","text":"DRY","x":15,"y":-25,"width":105,"height":65},
		{"id":"2ca6087c52cd5ab4","type":"text","text":"**Don't repeat yourself** (DRY; с англ. — «не повторяйся») — это принцип разработки программного обеспечения, нацеленный на снижение повторения информации различного рода, особенно в системах со множеством слоёв абстрагирования.","x":-125,"y":-360,"width":385,"height":192},
		{"id":"728b2215c49a55eb","type":"file","file":"image/Pasted image 20250104184430.png","x":-580,"y":120,"width":400,"height":316},
		{"id":"f9367f816fd7af28","type":"file","file":"image/Pasted image 20250104184454.png","x":280,"y":120,"width":400,"height":258},
		{"id":"71d05ace87544860","type":"text","text":"В первом примере мы видм, что методы `PrintName` и `PrintAge` дублируют логику вывода информации о пользователе. Во втором примере мы исправляем это, объединяя логику в одном методе `PrintInfo`.","x":-120,"y":436,"width":334,"height":209},
		{"id":"8850237f2394d508","type":"text","text":"KISS","x":-1720,"y":8,"width":98,"height":64},
		{"id":"9cd58ec826c188bf","type":"text","text":"**KISS** — это принцип проектирования и программирования, при котором простота системы декларируется в качестве основной цели или ценности. Есть два варианта расшифровки аббревиатуры: **«keep it simple, stupid»** и более корректный **«keep it short and simple»**.","x":-1841,"y":-467,"width":340,"height":299},
		{"id":"36c73b7a412e7d34","type":"text","text":"**В проектировании следование принципу KISS выражается в том, что:**\n\n- не имеет смысла реализовывать дополнительные функции, которые не будут использоваться вовсе или их использование крайне маловероятно, как правило, большинству пользователей достаточно базового функционала, а усложнение только вредит удобству приложения;\n    \n- не стоит перегружать интерфейс теми опциями, которые не будут нужны большинству пользователей, гораздо проще предусмотреть для них отдельный «расширенный» интерфейс (или вовсе отказаться от данного функционала);\n    \n- бессмысленно делать реализацию сложной бизнес-логики, которая учитывает абсолютно все возможные варианты поведения системы, пользователя и окружающей среды, — во-первых, это просто невозможно, а во-вторых, такая фанатичность заставляет собирать «звездолёт», что чаще всего иррационально с коммерческой точки зрения.","x":-2086,"y":278,"width":846,"height":367}
	],
	"edges":[
		{"id":"98e3c20638ccf5ff","fromNode":"d6c5f99ec33649ea","fromSide":"top","toNode":"2ca6087c52cd5ab4","toSide":"bottom","label":"пояснение"},
		{"id":"3a1780afb2c8e9d0","fromNode":"d6c5f99ec33649ea","fromSide":"left","toNode":"728b2215c49a55eb","toSide":"top","color":"1","label":"неправильно"},
		{"id":"59ca8d802905f135","fromNode":"d6c5f99ec33649ea","fromSide":"right","toNode":"f9367f816fd7af28","toSide":"top","color":"4","label":"правильно"},
		{"id":"59a7f9044fe54143","fromNode":"728b2215c49a55eb","fromSide":"right","toNode":"71d05ace87544860","toSide":"top"},
		{"id":"94214d8ef8237e0d","fromNode":"f9367f816fd7af28","fromSide":"left","toNode":"71d05ace87544860","toSide":"top"},
		{"id":"0e48b133cca4eb99","fromNode":"8850237f2394d508","fromSide":"top","toNode":"9cd58ec826c188bf","toSide":"bottom","label":"пояснение"},
		{"id":"9d5bacd153e5190a","fromNode":"8850237f2394d508","fromSide":"bottom","toNode":"36c73b7a412e7d34","toSide":"top","label":"принципы"}
	]
}