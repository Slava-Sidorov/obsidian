{
	"nodes":[
		{"id":"6afa4d2ac1b0027c","type":"file","file":"image/monolith.png","x":-607,"y":-220,"width":598,"height":369},
		{"id":"5e98ebf403dc2598","type":"text","text":"микро сервисы","x":248,"y":-280,"width":250,"height":60},
		{"id":"4068798e69ea9a51","type":"text","text":"монолит","x":-433,"y":-280,"width":250,"height":60},
		{"id":"bf1ba97077b7d7b9","type":"text","text":"## +:\n- **Простота разработки и развертывания**  \n    — Один код, один процесс — всё в одном месте.  \n    — Легко настроить CI/CD и деплой.\n    \n- **Производительность**  \n    — Нет сетевых вызовов между компонентами.  \n    — Меньше накладных расходов.\n    \n- **Легче отлаживать и тестировать**  \n    — Всё запускается локально как одно приложение.\n    \n- **Начало проекта**  \n    — Быстрый старт, не нужно думать об интеграции компонентов.","x":-607,"y":180,"width":250,"height":660},
		{"id":"278cd766aa4c0c62","type":"text","text":"## +:\n- **Масштабируемость**  \n    — Можно масштабировать только нужные сервисы.\n    \n- **Гибкость**  \n    — Каждая команда может использовать свой язык, базу данных и подход.\n    \n- **Изоляция**  \n    — Сбой одного сервиса не обязательно ломает всё приложение.\n    \n- **Надёжность**  \n    — Можно выкатывать и обновлять сервисы по отдельности.","x":85,"y":180,"width":250,"height":660},
		{"id":"3ce43c363f3ffe98","type":"text","text":"## -: \n- **Плохая масштабируемость по частям**  \n    — Нельзя масштабировать только нужный модуль, придётся весь сервис.\n    \n- **Жёсткое связывание**  \n    — Большой код становится трудно читать и сопровождать.\n    \n- **Слабая гибкость технологий(ответсвенность)**  \n    — Все модули должны использовать один стек технологий.\n    \n- **Надёжность**  \n    — Маленькое изменение может сломать всё приложение.","x":-259,"y":180,"width":250,"height":740},
		{"id":"c4b9ab322ec855fb","type":"text","text":"## -: \n- **Сложность инфраструктуры**  \n    — Требуется система оркестрации (Kubernetes, Docker), сервис-дискавери, логирование, мониторинг.\n    \n- **Сложность отладки и тестирования**  \n    — Проблемы могут быть распределёнными и трудными для анализа.\n    \n- **Задержки из-за сетевых вызовов/Согласованость данных(Kafka)**\n    — Межсервисная коммуникация обычно идёт по HTTP/gRPC и требует внимания к отказоустойчивости.\n    \n- **Высокий порог входа**  \n    — Нужны DevOps-навыки, правильный дизайн взаимодействий и контроль версий API.","x":410,"y":180,"width":250,"height":900},
		{"id":"944d945d44166993","type":"file","file":"image/micro_service.png","x":81,"y":-220,"width":579,"height":369}
	],
	"edges":[]
}